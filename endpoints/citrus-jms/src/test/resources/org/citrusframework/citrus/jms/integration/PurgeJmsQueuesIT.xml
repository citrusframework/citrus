<?xml version="1.0" encoding="UTF-8"?>
<spring:beans xmlns="http://www.citrusframework.org/schema/testcase"
              xmlns:jms="http://www.citrusframework.org/schema/jms/testcase"
              xmlns:spring="http://www.springframework.org/schema/beans"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
              xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
              http://www.citrusframework.org/schema/testcase http://www.citrusframework.org/schema/testcase/citrus-testcase.xsd
              http://www.citrusframework.org/schema/jms/testcase http://www.citrusframework.org/schema/jms/testcase/citrus-jms-testcase.xsd">

    <testcase name="PurgeJmsQueuesIT">
		<meta-info>
			<author>Christoph Deppisch</author>
			<creationdate>2008-04-25</creationdate>
			<status>FINAL</status>
			<last-updated-by>Christoph Deppisch</last-updated-by>
			<last-updated-on>2008-04-25T00:00:00</last-updated-on>
		</meta-info>
		
        <description>
          It might be essential to purge some jms queues before or during the test case.
          The bean org.citrusframework.citrus.jms.actions.PurgeJmsQueuesAction offers this functionality.

          In this example we do not inherit the functionality from a service bean in the
          serviceBeansContext.xml, because there was no demand for this functionality so far.
          But it is strongly recommended to do so, because otherwise the test case is
          dependent on class definitions like here org.citrusframework.citrus.jms.actions.PurgeJmsQueuesAction.

          Anyway the PurgeJmsQueuesAction offers the property "queueChain" to hold all queues that
          should be cleaned. The list expects to contain jms service beans that can inherit
          from the defaultJmsService as shown here. Finally the queue name is defined by the
          "serviceDestination" property. As you can see it is possible to reference properties
          from the local properties file.

          Note that usually all jms queues are cleaned at the beginning of the test suite by default.
          It is also possible to clean all queues by default before every test case is started. All these basic
          configurations are done in the Spring application context, where the test suite itself is configured.
        </description>
        <actions>
            <jms:purge-jms-queues>
                <jms:queue name="Citrus.Queue.Dummy"/>
                <jms:queue name="Citrus.Queue.Dummy.One.In"/>
                <jms:queue name="Citrus.Queue.Dummy.One.Out"/>
                <jms:queue name="Citrus.Queue.Dummy.One.In"/>
                <jms:queue name="Citrus.Queue.Dummy.One.Out"/>
                <jms:queue name="Citrus.Queue.Dummy.Three.In"/>
                <jms:queue name="Citrus.Queue.Dummy.Three.Out"/>
            </jms:purge-jms-queues>
            
            <jms:purge-jms-queues connection-factory="connectionFactory" receive-timeout="150">
                <jms:queue name="Citrus.Queue.Dummy"/>
                <jms:queue name="Citrus.Queue.Dummy.One.In"/>
                <jms:queue name="Citrus.Queue.Dummy.One.Out"/>
                <jms:queue name="Citrus.Queue.Dummy.One.In"/>
                <jms:queue name="Citrus.Queue.Dummy.One.Out"/>
                <jms:queue name="Citrus.Queue.Dummy.Three.In"/>
                <jms:queue name="Citrus.Queue.Dummy.Three.Out"/>
            </jms:purge-jms-queues>
            
            <jms:purge-jms-queues>
                <jms:queue ref="testQueue1"/>
                <jms:queue ref="testQueue2"/>
                <jms:queue ref="testQueue3"/>
                <jms:queue name="Citrus.Queue.Dummy.One.In"/>
                <jms:queue name="Citrus.Queue.Dummy.One.Out"/>
                <jms:queue name="Citrus.Queue.Dummy.Three.In"/>
                <jms:queue name="Citrus.Queue.Dummy.Three.Out"/>
            </jms:purge-jms-queues>
        </actions>
    </testcase>
    
</spring:beans>
