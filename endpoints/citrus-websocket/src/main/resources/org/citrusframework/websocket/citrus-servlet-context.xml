<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

  <description>Application context gets loaded via ContextLoaderListener on server startup</description>

  <context:annotation-config/>

  <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" />

  <bean id="citrusUrlHandlerMapping" class="org.citrusframework.websocket.handler.WebSocketUrlHandlerMapping">
    <property name="order" value="1" />
    <property name="interceptors">
      <list>
        <ref bean="citrusHandlerInterceptor"/>
      </list>
    </property>
  </bean>

  <bean id="citrusHandshakeHandler" class="org.springframework.web.socket.server.support.DefaultHandshakeHandler">
    <constructor-arg ref="upgradeStrategy"/>
  </bean>

  <bean id="upgradeStrategy" class="org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy"/>

  <bean id="citrusHandlerMapping" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
    <property name="interceptors">
      <list>
        <ref bean="citrusHandlerInterceptor"/>
      </list>
    </property>
  </bean>

  <bean id="citrusLoggingInterceptor" class="org.citrusframework.http.interceptor.LoggingHandlerInterceptor"/>
  <bean id="citrusHandlerInterceptor" class="org.citrusframework.http.interceptor.DelegatingHandlerInterceptor"/>

  <bean id="citrusMethodHandlerAdapter" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
    <property name="messageConverters">
      <util:list id="converters">
        <ref bean="citrusHttpMessageConverter"/>
      </util:list>
    </property>
  </bean>

  <!-- Message converter for multiple media types -->
  <bean id="citrusHttpMessageConverter" class="org.citrusframework.http.message.DelegatingHttpEntityMessageConverter"/>

  <!-- Default controller for handling incoming requests messages -->
  <bean id="citrusHttpMessageController" class="org.citrusframework.http.controller.HttpMessageController"/>

</beans>
