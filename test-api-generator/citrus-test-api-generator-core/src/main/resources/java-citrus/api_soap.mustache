{{>licenseInfo}}

package {{package}};

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;
import org.apache.commons.lang3.StringUtils;
import org.citrusframework.context.TestContext;
import org.citrusframework.exceptions.CitrusRuntimeException;
import org.citrusframework.testapi.GeneratedApi;
import org.citrusframework.testapi.GeneratedApiRequest;
import org.citrusframework.openapi.generator.soap.bookservice.citrus.OpenApiFromWsdlAbstractTestRequest;
import org.citrusframework.spi.Resources;
import org.citrusframework.util.FileUtils;
import org.citrusframework.ws.actions.SendSoapMessageAction;
import org.citrusframework.ws.actions.SendSoapMessageAction.Builder.SendSoapMessageBuilderSupport;
import org.citrusframework.ws.actions.SoapActionBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.CollectionUtils;

import {{invokerPackage}}.citrus.{{prefix}}AbstractTestRequest;

{{>additionalModelTypeAnnotations}}{{>generatedAnnotation}}{{#discriminator}}{{>typeInfoAnnotation}}{{/discriminator}}{{>xmlAnnotation}}
public class {{classname}} implements GeneratedApi
{
    public static final {{classname}} INSTANCE = new {{classname}}();

    public String getApiTitle() {
        return "{{appName}}";
    }

    public String getApiVersion() {
        return "{{appVersion}}";
    }

    public String getApiPrefix() {
        return "{{prefix}}";
    }

    public Map<String,String> getApiInfoExtensions() {
    Map<String, String> infoExtensionMap = new HashMap<>();
    {{#infoExtensions}}
        {{#entrySet}}
            infoExtensionMap.put("{{key}}", "{{value}}");
        {{/entrySet}}
    {{/infoExtensions}}
    return infoExtensionMap;
    }

    {{#operations}}
    {{#operation}}
    /**
      {{operationId}} ({{httpMethod}} {{httpPathPrefix}}{{{path}}})
      {{summary}}
      {{description}}
     **/
    public static class {{operationIdCamelCase}}Request extends {{prefix}}AbstractTestRequest implements GeneratedApiRequest {

        private final Logger coverageLogger = LoggerFactory.getLogger({{operationIdCamelCase}}Request.class);

        // Query params
        {{#allParams}}{{#isQueryParam}}private String {{paramName}};
        {{/isQueryParam}}{{/allParams}}

        public {{operationIdCamelCase}}Request(){
            // The name will be overwritten with the tag name using the actual namespace as prefix, when the class is loaded from xml
            setName("{{prefix}}".toLowerCase() + ":{{operationId}}RequestType");
        }

        public String getOperationName() {
            return "{{operationId}}";
        }

        public String getMethod() {
            return "{{httpMethod}}";
        }

        public String getPath() {
            return "{{path}}";
        }

        /**
        * This method sends the HTTP-Request
        */
        public void sendRequest(TestContext context) {

            SendSoapMessageAction.Builder soapSendMessageActionBuilder = new SoapActionBuilder().client(wsClient).send();
            SendSoapMessageBuilderSupport messageBuilderSupport = soapSendMessageActionBuilder.getMessageBuilderSupport();

            messageBuilderSupport.soapAction("{{operationId}}");

            String payload = null;
            String payloadType = null;
 
            if (StringUtils.isNotBlank(this.bodyFile)) {
                try {
                    payload = FileUtils.readToString(Resources.create(this.bodyFile), FileUtils.getDefaultCharset());
                } catch (IOException e) {
                    throw new CitrusRuntimeException("Failed to read payload resource", e);
                }
                payloadType = this.bodyContentType;
            } else if (StringUtils.isNotBlank(this.bodyLiteral)) {
                payload = this.bodyLiteral;
                payloadType = this.bodyLiteralContentType;
            }
   
            String body = "";
            String bodyType = "";
            if(payload != null && payloadType != null) {
                messageBuilderSupport.body(payload).contentType(payloadType);
                body = context.replaceDynamicContentInString(payload);
                bodyType = context.replaceDynamicContentInString(payloadType);
            }

            if (!CollectionUtils.isEmpty(soapHeaders)) {
                for (Entry<String, String> entry : soapHeaders.entrySet()) {
                    messageBuilderSupport = messageBuilderSupport.header(entry.getKey(),
                            entry.getValue());
                }
            }

            if (!CollectionUtils.isEmpty(mimeHeaders)) {
                for (Entry<String, String> entry : mimeHeaders.entrySet()) {
                    messageBuilderSupport = messageBuilderSupport.header("citrus_http_" + entry.getKey(),
                            entry.getValue());
                }
            }

            Map<String, String> queryParams = new HashMap<>();
            {{#allParams}}{{#isQueryParam}}
            if (StringUtils.isNotBlank(this.{{paramName}})) {
                queryParams.put("{{baseName}}", context.replaceDynamicContentInString(this.{{paramName}}));
                sendSoapMessageActionBuilder.queryParam("{{baseName}}", this.{{paramName}});
            }
            {{/isQueryParam}}{{/allParams}}
            String query = queryParams.entrySet().stream().map(e -> "\"" + e.getKey() + "\":\"" + e.getValue() + "\"").collect(Collectors.joining(",", "{", "}"));

            soapSendMessageActionBuilder.withReferenceResolver(context.getReferenceResolver());
            soapSendMessageActionBuilder = customizeBuilder(INSTANCE, context, soapSendMessageActionBuilder);

            soapSendMessageActionBuilder.build().execute(context);

            coverageLogger.trace(coverageMarker, "{{operationId}};{{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}};\"" +
                query.replace("\n", "\\n").replace("\r", "\\r").replace("\"", "\"\"") + "\";\"" +
                body.replace("\n", "\\n").replace("\r", "\\r").replace("\"", "\"\"") + "\";\"" + bodyType + "\"");
        }

        {{#allParams}}{{#isQueryParam}}
        public void set{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}(String {{paramName}}) {
            this.{{paramName}} = {{paramName}};
        }
        {{/isQueryParam}}{{/allParams}}
    }
    {{/operation}}
    {{/operations}}
}
