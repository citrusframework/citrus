<?xml version="1.0" encoding="UTF-8"?>
<spring:beans xmlns="http://www.citrusframework.org/schema/testcase" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.citrusframework.org/schema/testcase http://www.citrusframework.org/schema/testcase/citrus-testcase.xsd">
  <testcase name="ExecuteSQLIT">
    <meta-info>
      <author>Christoph Deppisch</author>
      <creationdate>2008-04-25</creationdate>
      <status>FINAL</status>
      <last-updated-by>Christoph Deppisch</last-updated-by>
      <last-updated-on>2008-04-25T00:00:00</last-updated-on>
    </meta-info>

    <description>
      Citrus offers several beans for database access. To prepare or clean
      the database before the test the service bean "databaseAccess" can be used.

      The bean executes a given list of sql statements either specified by inline
      sql statements or stored in an external sql file.

      For SELECT queries the bean "databaseQuery" offers a wide range of validating
      functionality for database ResultSets. First some SELECT statements try to get the
      information from the database. After that the ResultSets can be validated by defining
      several "validateDBValues". Here it is possible to check the column values of the previous
      sql statements. The usage of test variables is supported as well as database expressions
      like count(), avg(), min(), max() ...

      To validate a column that was previously selected from database simply define an entry
      in the validateDBValues with the column name as the key and any expression as value.
      The bean then will check the column to fit the specified value.

      Look at the first SELECT statement and you will see, that test variables beginning with
      the common variables prefix "${" and suffix "}" are supported too.

      The last validation in this example shows, that null values are supported too as expected values.
    </description>

    <variables>
      <variable name="rowsCount" value="0"/>
      <variable name="customerId" value="1"/>
    </variables>

    <actions>
      <sql datasource="testDataSource">
        <resource file="classpath:org/citrusframework/citrus/integration/actions/script.sql"/>
      </sql>

      <sql datasource="testDataSource">
        <statement>SELECT NAME FROM CUSTOMERS WHERE CUSTOMER_ID='${customerId}'</statement>
        <statement>SELECT COUNT(1) AS overall_cnt FROM ERRORS</statement>
        <statement>SELECT ORDER_ID FROM ORDERS WHERE DESCRIPTION LIKE 'Migrate%'</statement>
        <statement>SELECT DESCRIPTION FROM ORDERS WHERE ORDER_ID = 2</statement>
        <validate column="ORDER_ID" value="1"/>
        <validate column="NAME" value="Christoph"/>
        <validate column="OVERALL_CNT" value="${rowsCount}"/>
        <validate column="DESCRIPTION" value="NULL"/>
      </sql>

      <sql datasource="testDataSource">
        <resource file="classpath:org/citrusframework/citrus/integration/actions/query-script.sql"/>
        <validate column="ORDER_ID" value="1"/>
        <validate column="NAME" value="Christoph"/>
        <validate column="OVERALL_CNT" value="${rowsCount}"/>
        <validate column="DESCRIPTION" value="NULL"/>
      </sql>

      <sql datasource="testDataSource">
        <statement>SELECT REQUEST_TAG AS RTAG, DESCRIPTION AS DESC FROM ORDERS</statement>
        <validate column="RTAG">
          <values>
            <value>requestTag</value>
            <value>@ignore@</value>
          </values>
        </validate>
        <validate column="DESC" value="Migrate"/>
        <validate column="DESC">
          <values>
            <value>Migrate</value>
            <value>NULL</value>
          </values>
        </validate>
        <extract column="RTAG" variable="tags"/>
        <extract column="DESC" variable="description"/>
      </sql>

      <sql datasource="testDataSource">
        <statement>DELETE FROM CUSTOMERS</statement>
      </sql>

      <sql datasource="testDataSource">
        <statement>SELECT DESCRIPTION AS desc FROM ORDERS WHERE ORDER_ID = 2</statement>
        <validate column="DESC" value=""/>
      </sql>
    </actions>
  </testcase>
</spring:beans>
