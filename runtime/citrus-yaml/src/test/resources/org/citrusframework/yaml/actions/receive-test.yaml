name: ReceiveTest
author: Christoph
status: FINAL
actions:
  - receive:
      endpoint: helloEndpoint
      timeout: 10000
      message:
        headers:
          - name: operation
            value: "sayHello"
        body:
          data: Hello from Citrus!
  - receive:
      endpoint: helloEndpoint
      message:
        headers:
          - name: operation
            value: "sayHello"
        body:
          data: |
            <TestMessage>Hello Citrus</TestMessage>
  - receive:
      endpoint: helloEndpoint
      message:
        headers:
          - data: |
              <?xml version="1.0" encoding="UTF-8" standalone="no"?>
              <Header xmlns="http://citrusframework.org/test"><operation>hello</operation></Header>
          - name: "operation"
            value: "sayHello"
        body:
          data: |
            <?xml version="1.0" encoding="UTF-8" standalone="no"?>
            <TestMessage xmlns="http://citrusframework.org/test">Hello Citrus</TestMessage>
  - receive:
      endpoint: helloEndpoint
      timeout: 1000
      selector:
        element:
          - name: operation
            value: "sayHello"
      message:
        body:
          resource:
            file: "classpath:org/citrusframework/yaml/test-request-payload.xml"
  - receive:
      endpoint: helloEndpoint
      selector:
        value: "operation = 'sayHello'"
      message:
        body:
          data: |
            <TestMessage>Hello Citrus</TestMessage>
  - receive:
      endpoint: helloEndpoint
      message:
        dataDictionary: myDataDictionary
        body:
          data: |
            <TestMessage>Hello Citrus</TestMessage>
      extract:
        header:
          - name: "operation"
            variable: "operation"
        body:
          - path: "/TestMessage/text()"
            variable: "text"
  - receive:
      endpoint: helloEndpoint
      message:
        schemaValidation: false
        body:
          data: |
            <ns:TestMessage xmlns:ns="http://www.consol.com">Hello Citrus</ns:TestMessage>
        expression:
          - path: "/ns:TestMessage/"
            value: "newValue"
      ignore:
        - path: "/ns:TestMessage/ns:ignore"
      namespace:
        - prefix: "ns"
          value: "http://www.consol.com"
  - receive:
      endpoint: "direct:helloQueue"
      validate:
        - path: "/TestMessage/text"
          value: "Hello Citrus"
        - path: "/TestMessage/foo"
          value: "true"
          resultType: "boolean"
  - receive:
      endpoint: "direct:helloQueue"
      validate:
        - xpath:
            - expression: "/TestMessage/text"
              value: "Hello Citrus"
            - expression: "/TestMessage/foo"
              value: "true"
              resultType: "boolean"
  - receive:
      endpoint: "direct:helloQueue"
      validate:
        - script:
            type: "groovy"
            value: |
              assert true
        - path: "/TestMessage/foo"
          value: "true"
          resultType: "boolean"
  - receive:
      endpoint: "direct:helloQueue"
      validate:
        - script:
            type: "groovy"
            file: "classpath:org/citrusframework/yaml/test-validation-script.groovy"
  - receive:
      endpoint: "direct:helloQueue"
      message:
        type: "json"
      validate:
        - path: "$.json.text"
          value: "Hello Citrus"
        - path: "$..foo.bar"
          value: "true"
  - receive:
      endpoint: "direct:helloQueue"
      message:
        type: "json"
      validate:
        - jsonPath:
            - expression: "$.json.text"
              value: "Hello Citrus"
            - expression: "$..foo.bar"
              value: "true"
  - receive:
      endpoint: helloEndpoint
      message:
        type: "json"
        body:
          data: |
            { "FooMessage": { "foo": "Hello World!" }, { "bar": "@ignore@" }}
        expression:
          - path: "$.FooMessage.foo"
            value: "newValue"
      ignore:
        - path: "$.FooMessage.bar"
  - receive:
      endpoint: helloEndpoint
      message:
        type: "json"
        body:
          data: |
            { "message": { "text": "Hello World!" }, { "bar": "@ignore@" }}
      extract:
        header:
          - name: "operation"
            variable: "operation"
        body:
          - path: "$.message.text"
            variable: "text"
  - receive:
      endpoint: helloEndpoint
      validator: "myValidator"
      headerValidator: "myHeaderValidator"
      message:
        headers:
          - name: operation
            value: "sayHello"
        body:
          data: |
            <TestMessage>Hello Citrus</TestMessage>
  - receive:
      endpoint: helloEndpoint
      validators: "myValidator,defaultMessageValidator"
      headerValidators: "myHeaderValidator,defaultHeaderValidator"
      message:
        headers:
          - name: "operation"
            value: "sayHello"
        body:
          data: |
            <TestMessage>Hello Citrus</TestMessage>
