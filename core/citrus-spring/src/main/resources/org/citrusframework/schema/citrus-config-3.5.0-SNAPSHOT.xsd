<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Copyright 2006-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
     xmlns="http://www.citrusframework.org/schema/config"
     targetNamespace="http://www.citrusframework.org/schema/config"
     elementFormDefault="qualified"
     attributeFormDefault="unqualified">

    <xs:element name="actor">
        <xs:annotation>
          <xs:documentation>Test actor combines one or more endpoints. When actor is disabled by configuration
          respective endpoints will be disabled accordingly.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID" use="required"/>
            <xs:attribute name="name" type="xs:string"/>
            <xs:attribute name="disabled" type="xs:boolean" default="false"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="message-queue">
        <xs:annotation>
          <xs:documentation>Message queue acting as in memory object store.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID" use="required"/>
            <xs:attribute name="logging" type="xs:string"/>
            <xs:attribute name="polling-interval" type="xs:string"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="queue">
        <xs:annotation>
            <xs:documentation>Message queue acting as in memory object store.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="id" type="xs:ID" use="required"/>
            <xs:attribute name="logging" type="xs:string"/>
            <xs:attribute name="polling-interval" type="xs:string"/>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="DirectEndpointAdapterType">
        <xs:annotation>
          <xs:documentation>Basic direct endpoint properties.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="id" type="xs:ID"/>
        <xs:attribute name="queue" type="xs:string"/>
        <xs:attribute name="queue-name" type="xs:string"/>
        <xs:attribute name="actor" type="xs:string"/>
        <xs:attribute name="timeout" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="PropertiesType">
      <xs:annotation>
        <xs:documentation>Basic property with name and optional value.</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element name="property" minOccurs="1" maxOccurs="unbounded">
          <xs:complexType>
            <xs:attribute name="name" type="xs:string" use="required"/>
            <xs:attribute name="value" type="xs:string"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>

    <xs:element name="direct-endpoint">
      <xs:annotation>
        <xs:documentation>Direct message queue endpoint able to produce and consume messages on a in memory destination.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:complexContent>
          <xs:restriction base="DirectEndpointAdapterType"/>
        </xs:complexContent>
      </xs:complexType>
    </xs:element>

    <xs:element name="direct-sync-endpoint">
      <xs:annotation>
        <xs:documentation>Direct message queue endpoint able to produce and consume messages on a in memory destination.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:complexContent>
          <xs:extension base="DirectEndpointAdapterType">
            <xs:attribute name="polling-interval" type="xs:string"/>
            <xs:attribute name="message-correlator" type="xs:string"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
    </xs:element>

    <xs:complexType name="SchemaType">
        <xs:annotation>
          <xs:documentation>Schema resource properties.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="id" type="xs:ID" use="required"/>
        <xs:attribute name="location" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:element name="schema-collection">
        <xs:annotation>
          <xs:documentation>Collection of schema resources with same target namespace used for message syntax validation.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
              <xs:element name="schemas">
                  <xs:complexType>
                      <xs:sequence minOccurs="1" maxOccurs="unbounded">
                          <xs:element name="schema">
                              <xs:complexType>
                                  <xs:attribute name="location" type="xs:string" use="required" />
                              </xs:complexType>
                          </xs:element>
                      </xs:sequence>
                  </xs:complexType>
              </xs:element>
            </xs:sequence>
            <xs:attribute name="id" type="xs:ID" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="schema" type="SchemaType">
      <xs:annotation>
        <xs:documentation>Defines a schema resource used for message syntax validation.</xs:documentation>
      </xs:annotation>
    </xs:element>

    <xs:element name="schema-repository">
        <xs:annotation>
          <xs:documentation>Defines a schema repository holding one or more schema resources for message syntax validation.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="schemas" minOccurs="0">
                    <xs:complexType>
                        <xs:sequence>
                          <xs:element name="schema" type="SchemaType" minOccurs="0" maxOccurs="unbounded"/>
                          <xs:element name="reference" minOccurs="0" maxOccurs="unbounded">
                            <xs:complexType>
                              <xs:attribute name="schema" type="xs:string" use="required" />
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="locations" minOccurs="0">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="location" minOccurs="1" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:attribute name="path" type="xs:string" use="required" />
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="id" type="xs:ID" use="required"/>
            <xs:attribute name="schema-mapping-strategy" type="xs:string"/>
            <xs:attribute name="type" default="xml" type="xs:string"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="message-validators">
      <xs:annotation>
        <xs:documentation>List of available validator implementations. Mix of default and custom implementations.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:sequence>
            <xs:element name="validator" minOccurs="1" maxOccurs="unbounded">
              <xs:complexType>
                <xs:attribute name="ref" type="xs:string"/>
                <xs:attribute name="class" type="xs:string"/>
              </xs:complexType>
            </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="namespace-context">
      <xs:annotation>
        <xs:documentation>Global namespace definitions and mappings</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:sequence>
          <xs:element name="namespace" minOccurs="1" maxOccurs="unbounded">
            <xs:complexType>
              <xs:attribute name="prefix" type="xs:string"/>
              <xs:attribute name="uri" type="xs:string"/>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:element name="function-library">
      <xs:annotation>
        <xs:documentation>Custom set of functions combined in a library</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:sequence>
          <xs:element name="function" minOccurs="1" maxOccurs="unbounded">
            <xs:complexType>
              <xs:attribute name="name" type="xs:string" use="required"/>
              <xs:attribute name="ref" type="xs:string"/>
              <xs:attribute name="class" type="xs:string"/>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID" use="required"/>
        <xs:attribute name="prefix" type="xs:string" use="required"/>
      </xs:complexType>
    </xs:element>

    <xs:element name="validation-matcher-library">
      <xs:annotation>
        <xs:documentation>Custom set of validation matchers combined in a library</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:sequence>
          <xs:element name="matcher" minOccurs="1" maxOccurs="unbounded">
            <xs:complexType>
              <xs:attribute name="name" type="xs:string" use="required"/>
              <xs:attribute name="ref" type="xs:string"/>
              <xs:attribute name="class" type="xs:string"/>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID" use="required"/>
        <xs:attribute name="prefix" type="xs:string" use="required"/>
      </xs:complexType>
    </xs:element>

    <xs:complexType name="DataDictionaryType">
      <xs:annotation>
        <xs:documentation>Data dictionary holding key value mappings for dynamic test data in messages.</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element name="mappings" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="mapping" minOccurs="1" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:attribute name="path" type="xs:string" use="required"/>
                  <xs:attribute name="value" type="xs:string" use="required"/>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="mapping-file" minOccurs="0">
          <xs:complexType>
            <xs:attribute name="path" type="xs:string" use="required"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID" use="required"/>
      <xs:attribute name="global-scope" type="xs:boolean" default="true"/>
      <xs:attribute name="direction">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="UNBOUND"/>
            <xs:enumeration value="INBOUND"/>
            <xs:enumeration value="OUTBOUND"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="mapping-strategy">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="EXACT"/>
            <xs:enumeration value="STARTS_WITH"/>
            <xs:enumeration value="ENDS_WITH"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>

    <xs:element name="xml-data-dictionary">
      <xs:annotation>
        <xs:documentation>Data dictionary holding XML dom key value mappings for dynamic XML test data in messages.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:complexContent>
          <xs:extension base="DataDictionaryType"/>
        </xs:complexContent>
      </xs:complexType>
    </xs:element>

    <xs:element name="xpath-data-dictionary">
      <xs:annotation>
        <xs:documentation>Data dictionary holding XML Xpath key value mappings for dynamic XML test data in messages.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:complexContent>
          <xs:extension base="DataDictionaryType"/>
        </xs:complexContent>
      </xs:complexType>
    </xs:element>

    <xs:element name="json-data-dictionary">
      <xs:annotation>
        <xs:documentation>Data dictionary holding json key value mappings for dynamic json test data in messages.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:complexContent>
          <xs:extension base="DataDictionaryType"/>
        </xs:complexContent>
      </xs:complexType>
    </xs:element>

    <xs:element name="json-path-data-dictionary">
      <xs:annotation>
        <xs:documentation>Data dictionary holding json path expression mappings for dynamic json test data in messages.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:complexContent>
          <xs:extension base="DataDictionaryType"/>
        </xs:complexContent>
      </xs:complexType>
    </xs:element>

    <xs:element name="before-suite">
      <xs:annotation>
        <xs:documentation>Sequence of test actions executed before test suite run. Container execution can be restricted by suite name and test groups</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:sequence>
          <xs:element name="env" minOccurs="0" type="PropertiesType"/>
          <xs:element name="system" minOccurs="0" type="PropertiesType"/>
          <xs:element name="actions">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1" maxOccurs="unbounded">
                  <xs:any namespace="http://www.citrusframework.org/schema/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/jms/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/ws/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/http/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/camel/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/selenium/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/docker/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/kubernetes/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/zookeeper/testcase" processContents="strict"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID" use="required"/>
        <xs:attribute name="suites" type="xs:string"/>
        <xs:attribute name="groups" type="xs:string"/>
      </xs:complexType>
    </xs:element>

    <xs:element name="after-suite">
      <xs:annotation>
        <xs:documentation>Sequence of test actions executed after test suite run. Container execution can be restricted by suite name and test groups</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:sequence>
          <xs:element name="env" minOccurs="0" type="PropertiesType"/>
          <xs:element name="system" minOccurs="0" type="PropertiesType"/>
          <xs:element name="actions">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1" maxOccurs="unbounded">
                  <xs:any namespace="http://www.citrusframework.org/schema/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/jms/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/ws/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/http/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/camel/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/selenium/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/docker/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/kubernetes/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/zookeeper/testcase" processContents="strict"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID" use="required"/>
        <xs:attribute name="suites" type="xs:string"/>
        <xs:attribute name="groups" type="xs:string"/>
      </xs:complexType>
    </xs:element>

    <xs:element name="before-test">
      <xs:annotation>
        <xs:documentation>Sequence of test actions executed before a test case. Container execution can be restricted by test name, package and test groups</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:sequence>
          <xs:element name="env" minOccurs="0" type="PropertiesType"/>
          <xs:element name="system" minOccurs="0" type="PropertiesType"/>
          <xs:element name="actions">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1" maxOccurs="unbounded">
                  <xs:any namespace="http://www.citrusframework.org/schema/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/jms/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/ws/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/http/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/camel/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/selenium/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/docker/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/kubernetes/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/zookeeper/testcase" processContents="strict"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID" use="required"/>
        <xs:attribute name="test" type="xs:string"/>
        <xs:attribute name="package" type="xs:string"/>
        <xs:attribute name="groups" type="xs:string"/>
      </xs:complexType>
    </xs:element>

    <xs:element name="after-test">
      <xs:annotation>
        <xs:documentation>Sequence of test actions executed after a test case. Container execution can be restricted by test name, package and test groups</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:sequence>
          <xs:element name="env" minOccurs="0" type="PropertiesType"/>
          <xs:element name="system" minOccurs="0" type="PropertiesType"/>
          <xs:element name="actions">
            <xs:complexType>
              <xs:sequence>
                <xs:choice minOccurs="1" maxOccurs="unbounded">
                  <xs:any namespace="http://www.citrusframework.org/schema/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/jms/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/ws/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/http/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/camel/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/selenium/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/docker/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/kubernetes/testcase" processContents="strict"/>
                  <xs:any namespace="http://www.citrusframework.org/schema/zookeeper/testcase" processContents="strict"/>
                </xs:choice>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID" use="required"/>
        <xs:attribute name="test" type="xs:string"/>
        <xs:attribute name="package" type="xs:string"/>
        <xs:attribute name="groups" type="xs:string"/>
      </xs:complexType>
    </xs:element>

    <xs:element name="global-variables">
      <xs:annotation>
        <xs:documentation>Global scoped test variables - valid in all test cases</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:sequence>
          <xs:element name="variable" minOccurs="0" maxOccurs="unbounded">
            <xs:complexType>
              <xs:attribute name="name" type="xs:string" use="required"/>
              <xs:attribute name="value" type="xs:string" use="required"/>
            </xs:complexType>
          </xs:element>
          <xs:element name="file" minOccurs="0" maxOccurs="unbounded">
            <xs:complexType>
              <xs:attribute name="path" use="required"/>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <!-- Endpoint adapters used in server configuration -->

    <xs:element name="direct-endpoint-adapter">
      <xs:annotation>
        <xs:documentation>Server endpoint adapter forwards incoming requests to in memory message queue.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:complexContent>
          <xs:extension base="DirectEndpointAdapterType">
            <xs:attribute name="polling-interval" type="xs:string"/>
            <xs:attribute name="message-correlator" type="xs:string"/>
            <xs:attribute name="fallback-adapter" type="xs:string"/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
    </xs:element>

    <xs:element name="dispatching-endpoint-adapter">
      <xs:annotation>
        <xs:documentation>Request dispatching endpoint adapter calls other endpoint adapters according to dynamic adapter mapping performed based on request payload or header.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:attribute name="id" type="xs:ID"/>
        <xs:attribute name="mapping-key-extractor" type="xs:string" use="required"/>
        <xs:attribute name="mapping-strategy" type="xs:string" use="required"/>
        <xs:attribute name="fallback-adapter" type="xs:string"/>
      </xs:complexType>
    </xs:element>

    <xs:element name="empty-response-adapter">
      <xs:annotation>
        <xs:documentation>Generates empty response message</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:attribute name="id" type="xs:ID"/>
      </xs:complexType>
    </xs:element>

    <xs:element name="timeout-producing-adapter">
      <xs:annotation>
        <xs:documentation>Adapter will not respond to calling clients forcing a timeout.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:attribute name="id" type="xs:ID"/>
      </xs:complexType>
    </xs:element>

    <xs:element name="static-response-adapter">
      <xs:annotation>
        <xs:documentation>Uses static response message with given payload and header information.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
        <xs:sequence>
          <xs:element name="payload" type="xs:string" minOccurs="0"/>
          <xs:element name="resource" minOccurs="0">
            <xs:complexType>
              <xs:attribute name="file" type="xs:string" use="required"/>
              <xs:attribute name="charset" type="xs:string"/>
            </xs:complexType>
          </xs:element>
          <xs:element name="header" minOccurs="0">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="element" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="name" type="xs:string" use="required"/>
                    <xs:attribute name="value" type="xs:string" use="required"/>
                    <xs:attribute name="type">
                      <xs:simpleType>
                        <xs:restriction base="xs:string">
                          <xs:enumeration value="integer"/>
                          <xs:enumeration value="long"/>
                          <xs:enumeration value="float"/>
                          <xs:enumeration value="double"/>
                          <xs:enumeration value="byte"/>
                          <xs:enumeration value="short"/>
                          <xs:enumeration value="boolean"/>
                          <xs:enumeration value="string"/>
                        </xs:restriction>
                      </xs:simpleType>
                    </xs:attribute>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID"/>
      </xs:complexType>
    </xs:element>

</xs:schema>
