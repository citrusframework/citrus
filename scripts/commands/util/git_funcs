#!/bin/bash

# ---------------------------------------------------------------------------
# Copyright the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ---------------------------------------------------------------------------

# Checks if git subtree has changes in given top directory
check_git_clean() {
    local working_dir="$1"

    cd $working_dir
    echo "==== Checking for clean Git Repo"
    set +e
    git diff-index --quiet HEAD --
    local git_uncommitted=$?
    set -e
    if [ $git_uncommitted != 0 ]; then
       git status
       echo "Untracked or changed files exist. Please run release on a clean repo"
       exit 1
    fi
}

git_commit() {
    local working_dir="$1"
    local pattern="$2"
    local message="${3:-}"

    cd $working_dir
    echo "==== Committing files to local git"
    if [ -n "$message" ]; then
        git ls-files --modified | grep $pattern | xargs git commit -m "$message"
    else
        git ls-files --modified | grep $pattern | xargs git commit --amend --no-edit
    fi
}

get_git_remote() {
  local remote=$(readopt --git-remote)

  if [ -z "${remote}" ]; then
      # Push to the remote attached to the local checkout branch
      remote=$(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD) | sed -e 's/\([^\/]*\)\/.*/\1/')
      if [ -z "${remote}" ]; then
        echo "ERROR: Cannot find remote git repository to push to"
        exit 1
      fi
  fi
  echo $remote
}
