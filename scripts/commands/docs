#!/bin/bash

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

docs::description() {
    echo "Generate reference documentation and release to Github pages"
}

docs::usage() {
    cat - <<EOT
-n  --dry-run                 Dry run, which performs the whole release build but does no tagging or pushing
    --local                   Generate docs and release to local directory
    --html-only               Generate only HTML docs sources (should be fast)
    --release-version <ver>   Version to release (e.g. "1.2.1"). One version arg is mandatory
    --major-release           Marks a major release so snapshot version is automatically increased after release
    --log <log-file>          Write full log to <log-file>, only print progress to screen
-q  --quiet                   Adds quiet option to Maven options - only show errors
EOT
}

docs::run() {
    source "$(basedir)/commands/util/version_funcs"
    source "$(basedir)/commands/util/git_funcs"

    # Main application directory
    local working_dir=$(appdir)
    cd $working_dir

    # Validate release versions. Release versions have the format "1.3.4"
    local release_version=$(get_release_version "$working_dir")
    check_error $release_version

    local snapshot_version=$(get_snapshot_version "$working_dir")
    check_error $snapshot_version

    local next_version=$(get_next_snapshot_version "$working_dir")
    check_error $next_version

    if [ ! $(hasflag --local) ]; then
        if [ ! $(hasflag --dry-run -n) ]; then
            # Verify that there are no modified file in git repo
            check_git_clean "$working_dir"
        fi

        set_docs_version "$working_dir" "$release_version" "$snapshot_version"
    fi

    # Calculate common maven options
    local maven_opts="$(extract_maven_opts)"

    echo "==== Generate docs $release_version ($working_dir)"

    # Write to logfile if requested
    if [ $(readopt --log) ]; then
        local logfile=$(readopt --log)
        touch $logfile
        tail -f $logfile > >(grep ^====) &
        local tail_pid=$!
        trap "kill $tail_pid" EXIT

        exec >>$logfile 2>&1
        sleep 1
    fi

    if [ $(hasflag --local) ]; then
        echo "==== Generate and release to local docs"
        ./mvnw ${maven_opts} package -Dproject.docs.version=${release_version}

        open_url "file:///$working_dir/target/generated-docs/index.html"
    elif [ $(hasflag --dry-run -n) ]; then
        echo "==== Generate and release dry-run"
        ./mvnw ${maven_opts} package -Dproject.docs.version=${release_version}
    else
        echo "==== Generate and release to GitHub pages"
        ./mvnw ${maven_opts} verify -Dproject.docs.version=${release_version}
    fi

    if [ ! $(hasflag --local) ]; then
        if [ $(hasflag --major-release) ]; then
            update_docs_version "$working_dir" "$release_version" "$next_version"
        else
            update_docs_version "$working_dir" "$release_version" "$snapshot_version"
        fi

        if [[ "$release_version" != "$snapshot_version" ]]; then
            # Commit overview.adoc for new version
            git_commit "$working_dir" overview.adoc "Add docs version for $release_version"
        fi
    fi

    echo "==== Finished docs release $release_version"
}

# =======================================================================
# Helper

extract_maven_opts() {
    local profiles="docs-html"
    local maven_opts="--batch-mode -V -e -N"

    if [ $(hasflag --quiet -q) ]; then
        maven_opts="$maven_opts -q"
    fi

    if [ ! $(hasflag --html-only) ]; then
        profiles="$profiles,docs-pdf"
    fi

    if [ ! $(hasflag --local) ]; then
        profiles="$profiles,release-docs"
    fi

    maven_opts="$maven_opts -P$profiles"

    echo $maven_opts
}

update_docs_version() {
    local working_dir="$1"
    local version="$2"
    local snapshot_version="$3"
    local file="$working_dir/src/manual/overview.adoc"

    if [[ "$version" == "$snapshot_version" ]]; then
        return
    fi

    echo "Update docs to version: $version"

    sed -i "17p" $file
    sed -i "17s/$version/$snapshot_version/g" $file
}

set_docs_version() {
    local working_dir="$1"
    local version="$2"
    local snapshot_version="$3"
    local file="$working_dir/src/manual/overview.adoc"

    if [[ "$version" == "$snapshot_version" ]]; then
        echo "Using version: $version"
        return
    fi

    sed -i "s/$snapshot_version/$version/g" $file
}
